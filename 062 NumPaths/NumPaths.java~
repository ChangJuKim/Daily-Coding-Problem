public class NumPaths {
    // Scrap this
    // Instead loop through the array and add your value to the one to the right and below you.


    // Sums board[i-1][j] and board[i][j-1].
    // If i is... between N and M, handles differently....
    // If board[i-1][j] is out of bounds, returns 0
    //
    public static int addToBoard(int board, int i, int j) {

    }

    public static int numPaths(int N, int M) {
	// Ensures N < M
	if (N > M) {
	    int temp = N;
	    N = M;
	    M = N;
	}
	int[][] board = new int[N][M];
	board[0][0] = 1;
	// Counts diagonals
	for (int i = 0; i < M + N; i++) { // maybe M + N - 1
	    // There are three cases:
	    // i < N (diagonal increases in size)
	    // i >= N, i <= M (diagonal max size)
	    // i >= M (diagonal shrinks
	    if (i < N) {
		for (int j = 0; j < i + 1; j++) {
		    int[i][j] = addToBoard(board, i, j);
		}
	    }
	}

	return 0;
    }

    public static void main(String[] args) {
	numPaths(3, 5);
    }
}
