import java.util.Random;
import java.util.Arrays;

public class RunningMedian {
    // Idea 1: sorted Array. Finding where to insert is log(n). Median is just middle
    // Idea 2: BST. Inserting is log(n). To find median, count how many children are in each left/right.



    // goes down the left side until you find a leaf and returns it
    public static BstNode getLeftmost(BstNode node) {
	if (node.leftNode == null) {
	    return node;
	}
	return getLeftmost(node.leftNode);
    }

    // goes down the right side until you find a leaf and returns it
    public static BstNode getRightmost(BstNode node) {
	if (node.rightNode == null) {
	    return node;
	}
	return getRightmost(node.rightNode);
    }
    
    /*
      I will describe the logic behind the recursion of the last two else statements here:
      I will use the last statement as an example, as the other is the same but with left/right reversed
      1. Since the median is in the right side of the tree, we move our head to the rightNode
      Note that this is determined by comparing how many nodes there are in the left TOTAl side, and right TOTAL
      2. We add 1 to leftSide because the previous head is now at the left
      3. RightSide is a bit more complicated. Lets observe:
      We subtract 1 to rightSide because the new head is at the right of the previous head.
      Thus, this new head should no longer be counted. (This is similar logic to point 2.
      We subtract the new node's numChildren because this will be split up and re-added
      # of smaller nodes will be added to leftSide, # of larger to rightSide
    */ 
    public static double getMedian(BstNode head, int leftSide, int rightSide) {
	if (head.hasLeft()) {
	    leftSide += head.leftNode.getNumChildren() + 1;
	}
	if (head.hasRight()) {
	    rightSide += head.rightNode.getNumChildren() + 1;
	}
	// Oddly enough leftSide + rightSide should equal total Nodes - 1
	// So... function invariant (after this line): leftSide + rightSide = total Nodes - 1


	// Determine where the median is
	// The first three if-statements are base cases
	if (leftSide == rightSide) { // head is the median
	    return head.getData();
	} else if (leftSide == rightSide + 1) { // Median is between this node and rightmost of left node
	    return (head.getData() + getRightmost(head.leftNode).getData()) / 2.0;
	} else if (rightSide == leftSide + 1) { // Same as above but reversed
	    return (head.getData() + getLeftmost(head.rightNode).getData()) / 2.0;
	} else if (leftSide > rightSide + 1) { // Median is somewhere in the left
	    return getMedian(head.leftNode, leftSide - head.leftNode.getNumChildren() - 1, rightSide + 1);
	} else { // Median is somewhere in the right
	    return getMedian(head.rightNode, leftSide + 1, rightSide - head.rightNode.getNumChildren() - 1);
	}
    }

    // Takes in a stream of numbers, appends to the tree and returns the median
    // head is the head of the tree
    public static double getMedian(BstNode head, int num) {
	head.addNode(new BstNode(num));
	return getMedian(head, 0, 0);
    }


    // Code for testing purposes
    public static int[] randomArray() {
	Random rand = new Random();
	int[] ary = new int[rand.nextInt(15)];
	for (int i = 0; i < ary.length; i++) {
	    ary[i] = rand.nextInt(1000);
	}
	return ary;
    }

    // Code for testing purposes
    public static double findMedian(int[] ary) {
	Arrays.sort(ary);
	int maxLength = ary.length;
	if (maxLength % 2 == 0) {
	    return (ary[maxLength / 2 - 1] + ary[maxLength / 2]) / 2.0;
	} else {
	    return ary[maxLength / 2];
	}
    }

    public static String printAry(int[] ary) {
	String s = "[";
	for (int i = 0; i < ary.length; i++) {
	    if (i == 0) { s += ary[i]; }
	    else { s += ", " + ary[i]; }
	}
	return s + "]";
    }

    public static void main(String[] args) {
	for (int z = 0; z < 10; z++) {
	    int[] stream = randomArray();
	    System.out.println("Stream is: " + printAry(stream));
	    BstNode head = null;
	    double median;
	    for (int i = 0; i < stream.length; i++) {
		if (i == 0) {
		    head = new BstNode(stream[i]);
		    median = stream[i];
		} else {
		    median = getMedian(head, stream[i]);
		}
		System.out.println("(BST) Median is " + median);
		System.out.println("(Sorted) Median is " + findMedian(Arrays.copyOf(stream, i+1)));
		System.out.println("                                    : " + (median == findMedian(Arrays.copyOf(stream, i+1))));
	    }
	    System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}
    }
}
