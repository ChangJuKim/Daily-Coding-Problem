
// Node class for a Binary Search Tree
// Also contains a tracker of how many children it has
public class BstNode {
    private int data;
    public BstNode leftNode;
    public BstNode rightNode;
    private int numChildren;

    public BstNode() {
	data = -1;
	leftNode = rightNode = null;
	numChildren = 0;
    }

    public BstNode(int _data) {
	data = _data;
	leftNode = rightNode = null;
	numChildren = 0;
    }

    public int getNumChildren() {
	return numChildren;
    }

    public int getData() {
	return data;
    }

    // adds a node traversing down the tree to the correct spot
    // same value nodes are arbitrarily added to the left
    public void addNode(BstNode n) {
	numChildren += n.getNumChildren() + 1;
	if (n.getData() < data) {
	    if (!hasLeft()) {
		leftNode = n;
	    } else {
		leftNode.addNode(n);
	    }
	} else {
	    if (!hasRight()) {
		rightNode = n;
	    } else {
		rightNode.addNode(n);
	    }
	}
    }

    public boolean hasLeft() {
	return !(leftNode == null);
    }

    public boolean hasRight() {
	return !(rightNode == null);
    }

    public String toString() {
	return "" + data;
    }
}
