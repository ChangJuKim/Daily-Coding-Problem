import java.util.ArrayList;

public class LargeIntegerIntArray {
    // ArrayList<Integer> reprsentation of integers.
    // Each element in the int[] is 9 digits or less
    // Supports addition, multiplication, division, subtraction
    
    private ArrayList<Integer> num;
    private boolean isPos;


    public LargeIntegerIntArray(String number) {
	if (number.charAt(0) == '-') {
	    isPos = false;
	    number = number.substring(1);
	} else {
	    isPos = true;
	}
	num = new ArrayList<Integer>();
	int i;
	for (i = 0; i < number.length() - (number.length() % 9); i+=9) {
	    num.add(Integer.parseInt(number.substring(i, i+9)));
	}
	num.add(Integer.parseInt(number.substring(i)));
	
    }

    public LargeIntegerIntArray() {
	num = new ArrayList<Integer>();
    }

    public int length() {
	int length = (num.size() - 1) * 9;
	int lastNumber = 
    }

    // Gets the ith last digit
    private int getDigit(int i) {
	return Integer.parseInt(num.substring(length()-i-1, length()-i));
    }

    private void negate() {
	isPos = !isPos;
    }

    // CANNOT HANDLE NEGATIVES
    // Returns this + other
    // 123 + 45678 = 45801
    public LargeIntegerIntArray add(LargeIntegerIntArray other) {
	String result = "";
	int carry = 0;
	for (int i = 0; i < Math.min(length(), other.length()); i++) {
	    // Runs through the numbers backwards (backward logic in getDigit)
	    int digitSum = getDigit(i) + other.getDigit(i) + carry;
	    if (digitSum >= 10) {
		carry = 1;
		digitSum -= 10;
	    } else {
		carry = 0;
	    }
	    result = digitSum + result;
	}
	int i = Math.max(length(), other.length()) - Math.min(length(), other.length());
	String remaining = length() > other.length() ? num.substring(0, i) : other.num.substring(0, i);
	if (carry == 1) {
	    if (i == 0) {
		// If the lengths are the same, just add a 1
		result = "" + carry + result;
	    } else {
		remaining = remaining.substring(0, i-1)
		    + (length() > other.length() ? getDigit(i-1) + carry : other.getDigit(i-1) + carry);
	    }
	}
	result = remaining + result;
	return new LargeIntegerIntArray(result);
    }

    // Returns this - other
    public LargeIntegerIntArray subtract(LargeIntegerIntArray other) {
	// might change what other actually is
	other.negate();
	LargeIntegerIntArray num = add(other);
	return other;
    }

    public LargeIntegerIntArray multiply(LargeIntegerIntArray other) {
	return null;
    }

    public String toString() {
	return num;
    }
}
